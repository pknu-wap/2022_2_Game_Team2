using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class Player2 : MonoBehaviour
{
    public enum playState//플레이어 상태 변수
    {
        Normal,
        Stun
    }
    float hp = 15f;
    float hAxis, vAxis;     // 어느 방향으로 이동할 것인지 입력받아줄 변수.
    float playerSpeed = 5;  // 플레이어의 기본 이동속도.
    float jumpPower = 5;    // 플레이어의 점프력

    bool isJump;            // 점프 중인지 확인해줄 bool변수.

    bool jDown;             // 점프 키
    bool iDown;             // 상호작용 키
        
    public bool isLoading;  // 로딩중일때 플레이어 일시정지기능(움직임 및 점프 x).

    Vector3 movingWay;      // 플레이어가 나아갈 방향

    Rigidbody rigid;        // 플레이어의 리지드바디.

    GameObject clickObject;  // 플레이어가 상호작용 할 오브젝트를 넣어줄 변수.

    public GameManager gameManager; // 게임매니저
    public playState p_State;
    public Transform enemypos;
    void Awake()
    {
        rigid = GetComponent<Rigidbody>();
        isJump = false;
        p_State = playState.Normal;//플레이어 상태를 기본 상태로 
    }

    void Update()
    {
        if(p_State == playState.Stun)//스턴(적 위치로 플레이어 끌어당기기) 상태가 되면 실행
        {
            Vector3 way = (enemypos.position - transform.position).normalized;//플레이어를 당겨오기 위해 벡터로 방향을 계산하고
            transform.Translate(way * 2 * Time.deltaTime, Space.World);//스턴 동안 해당 값만큼 당겨온다.
            return;//플레이어가 스턴 상태면 위의 내용먼 실행시키고 리턴->사용자의 움직임 입력을 받지못함
        }
        GetInput();
        Move();
        Jump();
        Interaction();
    }

    void GetInput()
    {
        hAxis = Input.GetAxis("Horizontal");
        vAxis = Input.GetAxis("Vertical");
        jDown = Input.GetButtonDown("Jump");
        iDown = Input.GetKeyDown(KeyCode.E);
    }

    private void Move()
    {
        if (!isLoading)
        {
            movingWay = new Vector3(hAxis, 0, vAxis).normalized;

            transform.Translate(movingWay * playerSpeed * Time.deltaTime);
            //transform.position += movingWay * playerSpeed * Time.deltaTime;
        }
    }

    void Jump()
    {
        if (jDown && !isJump && !isLoading)
        {
            rigid.AddForce(Vector3.up * jumpPower, ForceMode.Impulse);
            isJump = true;
        }
    }

    void Interaction()
    {
        if (iDown)
        {
            Ray ray = new Ray(Camera.main.transform.position, Camera.main.transform.forward);

            RaycastHit hit;

            if (Physics.Raycast(ray, out hit, 2.5f)) // 레이저, 레이저 맞춘 대상, 사거리
            {
                if (hit.collider.CompareTag("Door"))
                {
                    clickObject = hit.collider.gameObject;
                    gameManager.Field_Change(clickObject);
                    isLoading = true;
                }
            }
            Debug.Log(clickObject.name);
        }
    }

    private void OnCollisionEnter(Collision collision)
    {
        if (collision.gameObject.CompareTag("Floor"))
        {
            isJump = false;
        }
    }

    public void DamageAction(int damage)
    {
        hp -= damage;
        print("플레이어 체력: " + hp);
    }
}
